import pkg from '../../pkg';
import timestamp from '../../utils/timestamp';
import css from '../css/index';
import js from '../js/index';
import { fontList } from '../styleProps';
import widthRange from '../widthRange';
import frame from './frame';

export default ({ config, assets, variables }) => {
	const containerID = `${config.filename}-box`;

	let frameCSS = '';
	let frameHTML = '';

	assets.forEach(({ node, filename }) => {
		const framed = frame({
			node,
			filename,
			widthRange: widthRange(assets),
			alt: config.alt,
			config,
			variables
		});

		frameCSS += `\n\n${framed.css}`;
		frameHTML += `\n\n${framed.html}`;
	});

	const ts = timestamp();

	let code = `<!-- Generated by ${pkg.name}v${pkg.version} on ${ts} -->\n`;

	switch (config.output) {
		default:
		case 'html': {
			code += `<style type='text/css'>${css.page({
				id: containerID,
				config,
				css: frameCSS
			})}</style>`;
			code += `<div id="${containerID}" class="figma2html">${frameHTML}</div>`;
			if (config.includeResizer) code += `<script>${js.resizer(containerID)}</script>`;
			if (config.includeGoogleFonts && fontList.length > 0)
				code += `<script>${js.fonts(fontList)}</script>`;
			if (config.customScript) code += `<script>${config.customScript}</script>`;
			break;
		}
		case 'svelte': {
			// scripts all go in an onMount function up top
			if (
				config.includeResizer ||
				(config.includeGoogleFonts && fontList.length) ||
				config.customScript
			) {
				code += `<script>import { onMount } from "svelte";\n`;
				code += `export let resolveImage;\n`;
				code += `onMount(() => {`;
				if (config.includeResizer) code += js.resizer(containerID);
				if (config.includeGoogleFonts && fontList.length) code += js.fonts(fontList);
				if (config.customScript) code += config.customScript;
				code += `})</script>`;
			}
			code += `<div id="${containerID}" class="figma2html">${frameHTML}</div>`;
			code += `<style>${css.page({ id: containerID, config, css: frameCSS })}</style>`;
			break;
		}
	}

	code += `\n<!-- End ${pkg.name}v${pkg.version} generated content - ${timestamp()} -->`;

	return code;
};
